---
export interface Props {
  question: any;
  sectionId: string;
}

const { question, sectionId } = Astro.props;

// Simple markdown to HTML converter for basic formatting
function processMarkdown(text: string): string {
  if (!text) return '';
  
  return text
    // Bold text: **text** -> <strong>text</strong>
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    // Links: [text](url) -> <a href="url">text</a>
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener">$1</a>')
    // Code/inline code: `text` -> <code>text</code>
    .replace(/`([^`]+)`/g, '<code>$1</code>')
    // Checkmarks and special bullets
    .replace(/✓/g, '✓')
    .replace(/•/g, '•')
    // Line breaks
    .replace(/\n/g, '<br/>');
}
---

<details class="faq-item" id={`${sectionId}-${question.id}`}>
  <summary class="faq-summary">
    <h3 class="faq-question">
      {question.question}
      <button class="question-permalink" onclick={`navigator.clipboard.writeText(window.location.origin + window.location.pathname + '#${sectionId}-${question.id}'); this.textContent = '✓ Copied!'; setTimeout(() => this.textContent = '#', 2000)`}>
        #
      </button>
    </h3>
    <svg class="faq-caret" width="20" height="20" viewBox="0 0 20 20" fill="none">
      <path d="M7.5 5L12.5 10L7.5 15" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  </summary>
  <div class="faq-answer">
    {question.answer.summary && (
      <p class="answer-summary" set:html={processMarkdown(question.answer.summary)}></p>
    )}
    
    {question.answer.details && Array.isArray(question.answer.details) && (
      <ul class="answer-list">
        {question.answer.details.map((detail: string) => (
          <li set:html={processMarkdown(detail)}></li>
        ))}
      </ul>
    )}
    
    {question.answer.proof && (
      <p class="answer-proof" set:html={processMarkdown(question.answer.proof)}></p>
    )}
  </div>
</details>

<style>
/* Remove webkit marker */
.faq-summary::-webkit-details-marker {
  display: none;
}

/* Question container for permalink */
.faq-question {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  margin: 0;
}

/* Markdown formatting styles */
.faq-answer strong {
  color: var(--text-primary);
  font-weight: 600;
}

.faq-answer code {
  background: var(--bg-secondary);
  padding: 2px 6px;
  border-radius: 4px;
  font-family: var(--font-mono);
  font-size: 0.9em;
  color: var(--text-primary);
}

.faq-answer a {
  color: var(--brand-primary);
  text-decoration: none;
  font-weight: 500;
}

.faq-answer a:hover {
  text-decoration: underline;
}
</style>