---
export interface Props {
  question: any;
  sectionId: string;
}

const { question, sectionId } = Astro.props;

function formatAnswer(answer: any): string[] {
  const parts = [];
  
  // Add summary
  if (answer.summary) {
    parts.push(`<p class="answer-summary">${answer.summary}</p>`);
  }
  
  // Add details list
  if (answer.details && Array.isArray(answer.details)) {
    parts.push('<ul class="answer-list">');
    answer.details.forEach((detail: string) => {
      parts.push(`<li>${detail}</li>`);
    });
    parts.push('</ul>');
  }
  
  // Add timeline
  if (answer.timeline && Array.isArray(answer.timeline)) {
    parts.push('<div class="answer-timeline">');
    answer.timeline.forEach((item: any) => {
      parts.push(`
        <div class="timeline-entry">
          <h5 class="timeline-time">${item.time}</h5>
          <p class="timeline-event">${item.event}</p>
          ${item.details && Array.isArray(item.details) ? `
            <ul class="timeline-details">
              ${item.details.map((d: string) => `<li>${d}</li>`).join('')}
            </ul>
          ` : ''}
        </div>
      `);
    });
    parts.push('</div>');
  }
  
  // Add results
  if (answer.results) {
    parts.push('<div class="answer-results">');
    Object.entries(answer.results).forEach(([key, value]) => {
      parts.push(`<p><strong>${key.replace(/(\d+)/, ' $1').toUpperCase()}:</strong> ${value}</p>`);
    });
    parts.push('</div>');
  }
  
  // Add segments
  if (answer.segments) {
    Object.entries(answer.segments).forEach(([key, values]: [string, any]) => {
      const title = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      parts.push(`<h5 class="segment-title">${title}:</h5>`);
      parts.push('<ul class="answer-list">');
      if (Array.isArray(values)) {
        values.forEach((item: string) => {
          parts.push(`<li>${item}</li>`);
        });
      }
      parts.push('</ul>');
    });
  }
  
  // Add comparison
  if (answer.comparison) {
    parts.push('<div class="comparison-grid">');
    Object.entries(answer.comparison).forEach(([key, value]) => {
      const label = key.charAt(0).toUpperCase() + key.slice(1);
      parts.push(`
        <div class="comparison-item">
          <h5>${label}:</h5>
          <p>${value}</p>
        </div>
      `);
    });
    parts.push('</div>');
  }
  
  // Add example
  if (answer.example) {
    parts.push('<div class="example-timeline">');
    Object.entries(answer.example).forEach(([key, value]) => {
      const label = key.replace(/_/g, ' ').toUpperCase();
      parts.push(`<p><strong>${label}:</strong> ${value}</p>`);
    });
    parts.push('</div>');
  }
  
  // Add outcome
  if (answer.outcome) {
    parts.push('<div class="outcome-comparison">');
    parts.push(`<p><strong>Before:</strong> ${answer.outcome.before}</p>`);
    parts.push(`<p><strong>After:</strong> ${answer.outcome.after}</p>`);
    parts.push('</div>');
  }
  
  // Add coverage
  if (answer.coverage && Array.isArray(answer.coverage)) {
    parts.push('<div class="coverage-list">');
    parts.push('<h5>Full Coverage:</h5>');
    parts.push('<ul class="coverage-chips">');
    answer.coverage.forEach((item: string) => {
      parts.push(`<li class="coverage-chip">${item}</li>`);
    });
    parts.push('</ul>');
  }
  
  if (answer.allocation_types && Array.isArray(answer.allocation_types)) {
    parts.push('<h5>Allocation Types We Track:</h5>');
    parts.push('<ul class="answer-list">');
    answer.allocation_types.forEach((type: string) => {
      parts.push(`<li>${type}</li>`);
    });
    parts.push('</ul>');
  }
  
  // Add proof chip if exists
  if (answer.proof) {
    parts.push(`<div class="proof-chip">${answer.proof}</div>`);
  }
  
  // Add customer quotes
  if (answer.customer_quotes && Array.isArray(answer.customer_quotes)) {
    parts.push('<div class="customer-quotes">');
    answer.customer_quotes.forEach((quote: string) => {
      parts.push(`<p class="quote">"${quote}"</p>`);
    });
    parts.push('</div>');
  }
  
  // Add testimonial
  if (answer.testimonial) {
    parts.push(`
      <blockquote class="testimonial">
        <p>"${answer.testimonial.quote}"</p>
        <cite>— ${answer.testimonial.author}, ${answer.testimonial.company}</cite>
      </blockquote>
    `);
  }
  
  // Add maturity levels
  if (answer.levels && Array.isArray(answer.levels)) {
    parts.push('<div class="maturity-levels">');
    answer.levels.forEach((level: any) => {
      const colorClass = level.level === 1 ? 'level-1' : 
                        level.level === 2 ? 'level-2' : 
                        level.level === 3 ? 'level-3' : 'level-4';
      parts.push(`
        <div class="maturity-level ${colorClass}">
          <h5>Level ${level.level} - ${level.name}</h5>
          <ul class="level-indicators">
            ${level.indicators.map((indicator: string) => `<li>□ ${indicator}</li>`).join('')}
          </ul>
        </div>
      `);
    });
    parts.push('</div>');
  }

  // Add metrics display
  if (answer.metrics) {
    parts.push('<div class="metrics-display">');
    Object.entries(answer.metrics).forEach(([key, value]) => {
      const label = key.replace(/_/g, ' ').toUpperCase();
      parts.push(`<div class="metric-item"><strong>${label}:</strong> ${value}</div>`);
    });
    parts.push('</div>');
  }

  // Add options list
  if (answer.options && Array.isArray(answer.options)) {
    parts.push('<div class="options-list">');
    parts.push('<ol class="numbered-list">');
    answer.options.forEach((option: string) => {
      parts.push(`<li>${option}</li>`);
    });
    parts.push('</ol>');
    parts.push('</div>');
  }

  // Add math section
  if (answer.math) {
    parts.push('<div class="math-section">');
    Object.entries(answer.math).forEach(([key, value]) => {
      const label = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      parts.push(`<p><strong>${label}:</strong> ${value}</p>`);
    });
    parts.push('</div>');
  }
  
  return parts;
}

const answerHtml = formatAnswer(question.answer);
---

<details class="faq-item" id={`${sectionId}-${question.id}`}>
  <summary>
    <h3>{question.question}</h3>
    <svg class="caret" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M5 7.5L10 12.5L15 7.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  </summary>
  <div class="answer" set:html={answerHtml.join('')} />
</details>

<style>
.faq-item {
  border-top: 1px solid var(--border-light);
  padding: var(--space-6) 0;
  transition: all 0.2s ease;
}

.faq-item:first-child {
  border-top: none;
}

.faq-item summary {
  list-style: none;
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 4px 0;
  user-select: none;
}

.faq-item summary::-webkit-details-marker {
  display: none;
}

.faq-item summary h3 {
  font-size: var(--text-h4);
  font-weight: 500;
  color: var(--text-primary);
  margin: 0;
  line-height: 1.4;
  font-family: var(--font-body);
}

.faq-item summary:hover h3 {
  color: var(--brand-primary);
}

.faq-item .caret {
  flex-shrink: 0;
  color: var(--text-muted);
  transition: transform 0.2s ease;
}

.faq-item[open] .caret {
  transform: rotate(180deg);
}

.faq-item[open] {
  background: var(--bg-secondary);
  border-radius: var(--radius-12);
  padding: var(--space-6);
  margin: 0 calc(-1 * var(--space-6));
  border: 1px solid var(--border-light);
}

.answer {
  margin-top: var(--space-4);
  color: var(--text-secondary);
  font-size: var(--text-body);
  line-height: var(--leading-relaxed);
}

.answer-summary {
  font-size: 18px;
  color: var(--text-primary);
  margin-bottom: var(--space-4);
  font-weight: 500;
}

.answer-list {
  list-style: none;
  padding: 0;
  margin: 16px 0;
}

.answer-list li {
  position: relative;
  padding-left: 24px;
  margin-bottom: 8px;
}

.answer-list li::before {
  content: '→';
  position: absolute;
  left: 0;
  color: var(--brand-primary);
}

.segment-title {
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  margin: var(--space-5) 0 var(--space-3);
  font-family: var(--font-mono);
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.timeline-entry {
  margin-bottom: var(--space-5);
  padding-left: var(--space-5);
  border-left: 2px solid var(--border-medium);
}

.timeline-time {
  font-family: var(--font-mono);
  font-size: 14px;
  color: var(--brand-primary);
  font-weight: 600;
  margin-bottom: 8px;
}

.timeline-event {
  font-weight: 500;
  color: var(--text-primary);
  margin-bottom: var(--space-2);
}

.timeline-details {
  list-style: none;
  padding: 0;
  margin: 8px 0;
}

.timeline-details li {
  padding-left: var(--space-4);
  margin-bottom: var(--space-1);
  font-size: 16px;
  color: var(--text-tertiary);
}

.answer-results {
  background: rgba(68, 176, 255, 0.05);
  border-left: 3px solid var(--brand-secondary);
  padding: 16px;
  margin: 20px 0;
  border-radius: var(--radius-8);
}

.comparison-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  margin: 20px 0;
}

.comparison-item h5 {
  font-size: 14px;
  font-weight: 600;
  color: var(--ink-900);
  margin-bottom: 8px;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.outcome-comparison {
  background: linear-gradient(90deg, rgba(255, 68, 68, 0.05) 0%, rgba(68, 255, 176, 0.05) 100%);
  padding: 16px;
  border-radius: var(--radius-8);
  margin: 20px 0;
}

.coverage-chips {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  list-style: none;
  padding: 0;
  margin: 12px 0;
}

.coverage-chip {
  background: var(--bg-800);
  border: 1px solid var(--hairline);
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 14px;
  font-weight: 500;
  color: var(--ink-800);
}

.proof-chip {
  display: inline-block;
  background: var(--brand-grad);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  font-weight: 600;
  font-size: 16px;
  margin-top: 20px;
  padding-top: 20px;
  border-top: 1px solid var(--hairline);
}

.customer-quotes {
  margin: 20px 0;
}

.customer-quotes .quote {
  font-style: italic;
  color: var(--ink-800);
  padding: 12px 0;
  border-left: 2px solid var(--brand-primary);
  padding-left: 16px;
  margin-bottom: 12px;
}

.testimonial {
  background: rgba(255, 255, 255, 0.03);
  border: 1px solid var(--hairline);
  border-radius: var(--radius-12);
  padding: 20px;
  margin: 24px 0;
}

.testimonial p {
  font-size: 18px;
  font-style: italic;
  color: var(--ink-900);
  margin-bottom: 12px;
}

.testimonial cite {
  font-style: normal;
  font-size: 14px;
  color: var(--ink-600);
  font-weight: 500;
}

.maturity-levels {
  margin: 24px 0;
  display: grid;
  gap: 16px;
}

.maturity-level {
  padding: 16px;
  border-radius: var(--radius-12);
  border: 1px solid var(--hairline);
}

.maturity-level.level-1 {
  background: rgba(244, 67, 54, 0.05);
  border-color: rgba(244, 67, 54, 0.2);
}

.maturity-level.level-2 {
  background: rgba(255, 193, 7, 0.05);
  border-color: rgba(255, 193, 7, 0.2);
}

.maturity-level.level-3 {
  background: rgba(33, 150, 243, 0.05);
  border-color: rgba(33, 150, 243, 0.2);
}

.maturity-level.level-4 {
  background: rgba(76, 175, 80, 0.05);
  border-color: rgba(76, 175, 80, 0.2);
}

.maturity-level h5 {
  font-size: 16px;
  font-weight: 600;
  color: var(--ink-900);
  margin-bottom: 12px;
}

.level-indicators {
  list-style: none;
  padding: 0;
  margin: 0;
}

.level-indicators li {
  padding: 4px 0;
  font-size: 14px;
  color: var(--ink-600);
}

.metrics-display {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 12px;
  margin: 20px 0;
  padding: 16px;
  background: rgba(255, 255, 255, 0.02);
  border-radius: var(--radius-8);
}

.metric-item {
  font-size: 14px;
  color: var(--ink-700);
}

.options-list {
  margin: 20px 0;
}

.numbered-list {
  list-style: decimal;
  padding-left: 20px;
  margin: 12px 0;
}

.numbered-list li {
  margin-bottom: 8px;
  color: var(--ink-700);
}

.math-section {
  background: rgba(42, 96, 248, 0.05);
  border-left: 3px solid var(--brand-primary);
  padding: 16px;
  margin: 20px 0;
  border-radius: var(--radius-8);
}

/* Mobile adjustments */
@media (max-width: 768px) {
  .faq-item summary h3 {
    font-size: 18px;
  }
  
  .answer {
    font-size: 16px;
  }
  
  .comparison-grid {
    grid-template-columns: 1fr;
  }
  
  .faq-item[open] {
    padding: 16px;
    margin: 0 -16px;
  }
}

/* Focus states for accessibility */
.faq-item summary:focus-visible {
  outline: 2px solid var(--brand-primary);
  outline-offset: 2px;
  border-radius: var(--radius-8);
}

/* Animation for smooth open/close */
.faq-item[open] .answer {
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
</style>