---
// Simple client-side search component
---

<div class="faq-search">
  <div class="search-container">
    <svg class="search-icon" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M17.5 17.5L13.875 13.875M15.8333 9.16667C15.8333 12.8486 12.8486 15.8333 9.16667 15.8333C5.48477 15.8333 2.5 12.8486 2.5 9.16667C2.5 5.48477 5.48477 2.5 9.16667 2.5C12.8486 2.5 15.8333 5.48477 15.8333 9.16667Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
    <input 
      type="text" 
      placeholder="Search FAQ... (⌘K to focus)"
      class="search-input"
      id="faq-search"
      autocomplete="off"
      spellcheck="false"
    />
    <kbd class="search-kbd">⌘K</kbd>
    <button class="search-clear" id="search-clear" style="display: none;" aria-label="Clear search">
      <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M12 4L4 12M4 4L12 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
  </div>
  <div class="search-results" id="search-results" style="display: none;"></div>
</div>

<style>
/* Minimal custom styles - premium styles are in faq-premium.css */
.search-container {
  position: relative;
  display: flex;
  align-items: center;
}

.search-icon {
  position: absolute;
  left: 16px;
  color: var(--text-muted);
  pointer-events: none;
  z-index: 2;
}

.search-kbd {
  position: absolute;
  right: 16px;
  top: 50%;
  transform: translateY(-50%);
  background: var(--bg-secondary);
  color: var(--text-muted);
  font-size: 12px;
  padding: 4px 8px;
  border-radius: 6px;
  border: 1px solid var(--border-light);
  font-family: var(--font-mono);
  pointer-events: none;
  z-index: 2;
}

.search-clear {
  position: absolute;
  right: 16px;
  background: none;
  border: none;
  color: var(--text-muted);
  cursor: pointer;
  padding: 4px;
  border-radius: var(--radius-8);
  transition: all 0.2s ease;
  z-index: 3;
}

.search-clear:hover {
  color: var(--text-secondary);
  background: var(--bg-secondary);
}

.result-section {
  font-size: 12px;
  color: var(--text-muted);
  text-transform: uppercase;
  letter-spacing: 0.05em;
  margin-bottom: 4px;
  font-family: var(--font-mono);
}

.result-question {
  font-size: 15px;
  color: var(--text-primary);
  font-weight: 500;
  margin-bottom: 6px;
  line-height: 1.3;
}

.result-preview {
  font-size: 14px;
  color: var(--text-tertiary);
  line-height: 1.4;
}

.no-results {
  padding: 24px;
  text-align: center;
  color: var(--text-muted);
  font-size: 14px;
}
</style>

<script>
// Lightweight client-side search
document.addEventListener('DOMContentLoaded', () => {
  const searchInput = document.getElementById('faq-search');
  const searchClear = document.getElementById('search-clear');
  const searchResults = document.getElementById('search-results');
  
  if (!searchInput || !searchClear || !searchResults) return;
  
  let searchData = [];
  
  // Build search index from FAQ data
  function buildSearchIndex() {
    const faqItems = document.querySelectorAll('.faq-item');
    searchData = Array.from(faqItems).map(item => {
      const section = item.closest('.faq-section');
      const sectionTitle = section?.querySelector('.section-title')?.textContent || '';
      const question = item.querySelector('h3')?.textContent || '';
      const answer = item.querySelector('.answer')?.textContent || '';
      
      return {
        id: item.id,
        section: sectionTitle,
        question,
        answer: answer.substring(0, 200), // Preview
        element: item
      };
    });
  }
  
  // Simple fuzzy search
  function search(query) {
    if (!query.trim()) return [];
    
    const results = [];
    const queryLower = query.toLowerCase();
    
    searchData.forEach(item => {
      let score = 0;
      
      // Question title match (highest priority)
      if (item.question.toLowerCase().includes(queryLower)) {
        score += 10;
      }
      
      // Answer content match
      if (item.answer.toLowerCase().includes(queryLower)) {
        score += 5;
      }
      
      // Section match
      if (item.section.toLowerCase().includes(queryLower)) {
        score += 3;
      }
      
      if (score > 0) {
        results.push({ ...item, score });
      }
    });
    
    return results.sort((a, b) => b.score - a.score).slice(0, 8);
  }
  
  // Highlight search terms
  function highlightText(text, query) {
    if (!query.trim()) return text;
    
    const regex = new RegExp(`(${query})`, 'gi');
    return text.replace(regex, '<span class="search-highlight">$1</span>');
  }
  
  // Render search results
  function renderResults(results, query) {
    if (results.length === 0) {
      searchResults.innerHTML = '<div class="no-results">No results found</div>';
      return;
    }
    
    const html = results.map(result => `
      <div class="search-result" data-target="${result.id}">
        <div class="result-section">${result.section}</div>
        <div class="result-question">${highlightText(result.question, query)}</div>
        <div class="result-preview">${highlightText(result.answer, query)}...</div>
      </div>
    `).join('');
    
    searchResults.innerHTML = html;
  }
  
  // Handle search input
  let searchTimeout;
  const kbdElement = document.querySelector('.search-kbd');
  
  searchInput.addEventListener('input', (e) => {
    const query = e.target.value;
    
    // Show/hide clear button and kbd
    if (query) {
      searchClear.style.display = 'block';
      kbdElement.style.display = 'none';
    } else {
      searchClear.style.display = 'none';
      kbdElement.style.display = 'block';
    }
    
    // Debounce search
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => {
      if (query.trim()) {
        const results = search(query);
        renderResults(results, query);
        searchResults.style.display = 'block';
      } else {
        searchResults.style.display = 'none';
      }
    }, 150);
  });
  
  // Focus/blur handling for kbd visibility
  searchInput.addEventListener('focus', () => {
    if (!searchInput.value) {
      kbdElement.style.display = 'none';
    }
  });
  
  searchInput.addEventListener('blur', () => {
    if (!searchInput.value) {
      setTimeout(() => kbdElement.style.display = 'block', 100);
    }
  });
  
  // Handle clear button
  searchClear.addEventListener('click', () => {
    searchInput.value = '';
    searchClear.style.display = 'none';
    kbdElement.style.display = 'none'; // Keep hidden while focused
    searchResults.style.display = 'none';
    searchInput.focus();
  });
  
  // Keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    // Cmd/Ctrl + K to focus search
    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
      e.preventDefault();
      searchInput.focus();
      searchInput.select();
    }
  });
  
  // Handle result clicks
  searchResults.addEventListener('click', (e) => {
    const result = e.target.closest('.search-result');
    if (result) {
      const targetId = result.dataset.target;
      const targetElement = document.getElementById(targetId);
      
      if (targetElement) {
        // Open the details element if it's closed
        const details = targetElement.closest('details');
        if (details && !details.open) {
          details.open = true;
        }
        
        // Smooth scroll to element
        const offset = 120;
        const targetPosition = targetElement.offsetTop - offset;
        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });
        
        // Hide search results
        searchResults.style.display = 'none';
        searchInput.value = '';
        searchClear.style.display = 'none';
        
        // Track search click
        if (typeof window !== 'undefined' && window.posthog) {
          window.posthog.capture('faq_search_result_clicked', {
            query: searchInput.value,
            result_id: targetId
          });
        }
      }
    }
  });
  
  // Hide results when clicking outside
  document.addEventListener('click', (e) => {
    if (!e.target.closest('.faq-search')) {
      searchResults.style.display = 'none';
    }
  });
  
  // Keyboard navigation
  searchInput.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      searchResults.style.display = 'none';
      searchInput.blur();
    }
  });
  
  // Initialize search index
  buildSearchIndex();
});
</script>